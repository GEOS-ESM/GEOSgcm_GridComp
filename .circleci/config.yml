version: 2.1

executors:
  gfortran:
    docker:
      - image: gmao/ubuntu20-geos-env-mkl:v6.2.7-openmpi_4.0.6-gcc_11.2.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_AUTH_TOKEN
    environment:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      MPIEXEC_PREFLAGS: --oversubscribe
    resource_class: large
    #MEDIUM# resource_class: medium

  ifort:
    docker:
      - image: gmao/ubuntu20-geos-env:v6.2.7-intelmpi_2021.2.0-intel_2021.2.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_AUTH_TOKEN
    resource_class: large
    #MEDIUM# resource_class: medium

workflows:
  build-test:
    jobs:
      - build-GEOSgcm:
          name: build-GEOSgcm-on-<< matrix.compiler >>
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          context: 
            - docker-hub-creds

commands:
  versions:
    description: "Versions, etc."
    parameters:
      compiler:
        type: string
    steps:
      - run: mpirun --version && << parameters.compiler >> --version && echo $BASEDIR && pwd && ls && echo "$(nproc)"

  checkout_fixture:
    description: "Checkout fixture"
    parameters:
      repo:
        type: string
    steps:
      - run: |
          cd ${CIRCLE_WORKING_DIRECTORY}
          git clone https://github.com/GEOS-ESM/<< parameters.repo >>.git

  mepoclone:
    description: "Mepo clone external repos"
    parameters:
      repo:
        type: string
    steps:
      - run: |
          cd ${CIRCLE_WORKING_DIRECTORY}/<< parameters.repo >>
          mepo clone
          mepo status

  mepodevelop:
    description: "Mepo develop GEOSgcm_GridComp GEOSgcm_App GMAO_Shared"
    parameters:
      repo:
        type: string
    steps:
      - run: |
          cd ${CIRCLE_WORKING_DIRECTORY}/<< parameters.repo >>
          mepo develop GEOSgcm_GridComp GEOSgcm_App GMAO_Shared
          mepo status

  checkout_feature_branch:
    description: "Mepo checkout-if-exists feature branch"
    parameters:
      repo:
        type: string
    steps:
      - run: |
          cd ${CIRCLE_WORKING_DIRECTORY}/<< parameters.repo >>
          echo "${CIRCLE_BRANCH}"
          if [ "${CIRCLE_BRANCH}" != "develop" ] && [ "${CIRCLE_BRANCH}" != "main" ]
          then
              mepo checkout-if-exists ${CIRCLE_BRANCH}
          fi
          mepo status

  cmake:
    description: "Run CMake"
    parameters:
      repo:
        type: string
      compiler:
        type: string
    steps:
      - run: |
          mkdir -p /logfiles
          cd ${CIRCLE_WORKING_DIRECTORY}/<< parameters.repo >>
          mkdir -p ${CIRCLE_WORKING_DIRECTORY}/workspace/build-<< parameters.repo >>
          cd ${CIRCLE_WORKING_DIRECTORY}/workspace/build-<< parameters.repo >>
          cmake ${CIRCLE_WORKING_DIRECTORY}/<< parameters.repo >> -DBASEDIR=$BASEDIR/Linux -DCMAKE_Fortran_COMPILER=<< parameters.compiler >> -DCMAKE_BUILD_TYPE=Debug -DUSE_F2PY=OFF -DMPIEXEC_PREFLAGS=${MPIEXEC_PREFLAGS} -DCMAKE_INSTALL_PREFIX=${CIRCLE_WORKING_DIRECTORY}/workspace/install-<< parameters.repo >> |& tee /logfiles/cmake.log

  buildinstall:
    description: "Build and install"
    parameters:
      repo:
        type: string
    steps:
      - run: |
          cd ${CIRCLE_WORKING_DIRECTORY}/workspace/build-<< parameters.repo >>
          make -j"$(nproc)" install |& tee /logfiles/make.log
          #MEDIUM# make -j4 install |& tee /logfiles/make.log

jobs:
  build-GEOSgcm:
    parameters:
      compiler:
        type: string
    executor: << parameters.compiler >>
    working_directory: /root/project
    steps:
      - run:
          name: "GEOSgcm_GridComp branch"
          command: echo ${CIRCLE_BRANCH}
      - checkout_fixture:
          repo: GEOSgcm
      - versions:
          compiler: << parameters.compiler >>
      - mepoclone:
          repo: GEOSgcm
      - mepodevelop:
          repo: GEOSgcm
      - checkout_feature_branch:
          repo: GEOSgcm
      - cmake:
          repo: GEOSgcm
          compiler: << parameters.compiler >>
      - buildinstall:
          repo: GEOSgcm
      - store_artifacts:
          path: /logfiles
